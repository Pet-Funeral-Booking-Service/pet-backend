name : Deploy to EC2 with git Container

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: pet_service
        ports:
          - 3307:3306

    steps:
      - name: Checkout source code # checkout 액션으로 코드 저장소로부터 CI 서버로 코드 내려받음
        uses: actions/checkout@v3

        # GitHub Container 로그인
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 푸시한 사람의 깃허브 ID
          password: ${{ secrets.GITHUB_TOKEN }} # 깃액션에서 자동으로 제공

        # 도커 이미지 생성
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
       # gradlew 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew clean build


        # 도커 이미지를 git container 에 push
      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ github.repository_owner }}/pet-backend-service:v1

      # 깃허브 시크릿의 환경변수값들 불러온 것
      - name: Create .env file from Github secret
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ACCESS_KEY_EXPIRATION_SECONDS=${{ secrets.ACCESS_KEY_EXPIRATION_SECONDS }}" >> .env
          echo "REFRESH_KEY_EXPIRATION_SECONDS=${{ secrets.REFRESH_KEY_EXPIRATION_SECONDS }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} >> .env
          echo "GOOGOLE_CLIENT_ID=${{ secrets.GOOGOLE_CLIENT_ID }} >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env

      - name: Upload docker-compose.yml and .env to EC2
        uses: appleboy/scp-action@v0.1.7 # 깃허브 리포지토리 파일을 EC2 서버에 복사
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: |
            docker-compose.yml
            .env
          target: /home/ubuntu/app

      # EC2 에 SSH 연결해서 컨테이너 자동 배포 과정
      - name: SSH to EC2 and run docker-compose
        uses: appleboy/ssh-action@v0.1.7
        with: # 어디에 접속할지 정한 것
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: | # 명령어 나열
            cd /home/ubuntu/app
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin 
            docker compose down
            docker compose pull
            docker compose up -d

    

      



        
